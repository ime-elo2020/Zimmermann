/*
******************************************************************************
File:     main.cpp
Info:     Generated by Atollic TrueSTUDIO(R) 9.0.0   2019-06-02
The MIT License (MIT)
Copyright (c) 2018 STMicroelectronics
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
******************************************************************************
*/

/* Includes */
#include "stm32f4xx.h"
#include "stm32f4_discovery.h"


#define endereco 0x1C
#define eixoX 0x29
#define eixoY 0x2B




/* Private macro */
/* Private variables */
/* Private function prototypes */
/* Private functions */

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
void init_i2c(){
    // Estrutura de inicialização
    I2C_InitTypeDef ic;
    GPIO_InitTypeDef g;

    // Inicializa o I2C
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
    ic.I2C_ClockSpeed = 100000;
    ic.I2C_Mode = I2C_Mode_I2C;
    ic.I2C_DutyCycle = I2C_DutyCycle_2;
    ic.I2C_OwnAddress1 = 0x00;
    ic.I2C_Ack = I2C_Ack_Disable;
    ic.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    I2C_Init(I2C2, &ic);
    I2C_Cmd(I2C2, ENABLE);

    // Inicializa GPIO em open-drain
    RCC_APB2PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    g.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11;
    g.GPIO_Mode = GPIO_Mode_AF;
    g.GPIO_OType=GPIO_OType_OD;
    g.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_Init(GPIOB, &g);
}

void i2c_start()
{
    //Vai esperar pelo I2C ficar livre
    while (I2C_GetFlagStatus(I2C2, I2C_FLAG_BUSY));

    // Condição de inicio
    I2C_GenerateSTART(I2C2, ENABLE);

    // Espera pelo I2C EV5.
    // Significa que a condição de início foi enviada no terminal de I2C.
    while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_MODE_SELECT));
}

void i2c_stop()
{
    // Condição de Stop
    I2C_GenerateSTOP(I2C2, ENABLE);
    // Espera até a condição de Stop termine
    while (I2C_GetFlagStatus(I2C2, I2C_FLAG_STOPF));
}

void i2c_address_direction(uint8_t address, uint8_t direction)
    {
        // Envia endereço do Slave
        I2C_Send7bitAddress(I2C2, address, direction);

        // Espera pelo I2C EV6
        // Significa que recebeu o ACK do Slave
        if (direction == I2C_Direction_Transmitter)
        {
            while (!I2C_CheckEvent(I2C2,
                I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
        }
        else if (direction == I2C_Direction_Receiver)
        {
            while (!I2C_CheckEvent(I2C2,
                I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
        }
    }

    void i2c_transmit(uint8_t byte)
    {
        // Envia byte de dados
        I2C_SendData(I2C2, byte);
        // Espera pelo I2C EV8_2.
        // Significa que os dados foram fisicamente movidos
        while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
    }

    uint8_t i2c_receive_ack()
    {
        // Dá enable no ACK de dado recebido
        I2C_AcknowledgeConfig(I2C2, ENABLE);
        // Espera pelo I2C EV7
        // Significa que o dado foi recebido no data register do I2C
        while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_RECEIVED));

        // Faz a leitura e retorna um byte de dado do data register do I2C
        return I2C_ReceiveData(I2C2);
    }

    uint8_t i2c_receive_nack()
    {
        // Dá Disable no ACK de dado recebido
        I2C_AcknowledgeConfig(I2C2, DISABLE);
        // Espera pelo I2C EV7
        // Significa que o dado foi recebido no data register do I2C
        while (!I2C_CheckEvent(I2C2, I2C_EVENT_MASTER_BYTE_RECEIVED));

        // Faz a leitura e retorna um byte de dado do data register do I2C
        return I2C_ReceiveData(I2C2);
    }

    void i2c_write(uint8_t address, uint8_t data, bool stop_condition = false)
    {
        i2c_start();
        i2c_address_direction(address << 1, I2C_Direction_Transmitter);
        i2c_transmit(data);
        if (stop_condition){
        	i2c_stop();
        }
    }

    void i2c_read(uint8_t address, uint8_t* data)
    {
        i2c_start();
        i2c_address_direction(address << 1, I2C_Direction_Receiver);
        *data = i2c_receive_nack();
        i2c_stop();
    }

int main(void)
{
  uint8_t x_acc;
  uint8_t y_acc;
  init_i2c();
  STM_EVAL_LEDInit(LED3);
  STM_EVAL_LEDInit(LED4);
  STM_EVAL_LEDInit(LED5);
  STM_EVAL_LEDInit(LED6);

  while (1){
	  i2c_write(endereco, eixoX);
	  i2c_read(endereco,&x_acc);
	  i2c_write(endereco, eixoY);
	  i2c_read(endereco,&y_acc);
	  // -128(-2g) a 127(2g)
	  // aqui, a partir de certos valores para os eixos x e y, os leds correspondentes serão acesos
	  if (int8_t(x_acc)>25) {
		  STM_EVAL_LEDOn(LED5);
	  }
	  else {
		  STM_EVAL_LEDOff(LED5);
	  }
	  if (int8_t(y_acc)>25) {
		  STM_EVAL_LEDOn(LED6);
	  }
	  else {
		  STM_EVAL_LEDOff(LED6);
	  }
	  if (int8_t(x_acc)<-25) {
		  STM_EVAL_LEDOn(LED3);
	  }
	  else {
		  STM_EVAL_LEDOff(LED3);
	  }
	  if (int8_t(y_acc)<-25) {
		  STM_EVAL_LEDOn(LED4);
	  }
	  else {
		  STM_EVAL_LEDOff(LED4);
	  }




  }


}


/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
extern "C" void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size){
  /* TODO, implement your code here */
  return;
}

/*
 * Callback used by stm324xg_eval_audio_codec.c.
 * Refer to stm324xg_eval_audio_codec.h for more info.
 */
extern "C" uint16_t EVAL_AUDIO_GetSampleCallBack(void){
  /* TODO, implement your code here */
  return -1;
}
